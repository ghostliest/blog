generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  BLOCKED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstname String
  lastname  String
  password  String
  role      Role     @default(USER)
  status    Status   @default(ACTIVE)
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower     Follower[]     @relation("follower")
  followed     Follower[]     @relation("followed")
  Post         Post[]
  FavoritePost FavoritePost[]
  LikedPost    LikedPost[]

  @@map("users")
}

model Follower {
  id         Int      @id @default(autoincrement())
  followerId Int
  followedId Int
  createAt   DateTime @default(now())

  follower User @relation("follower", fields: [followerId], references: [id])
  followed User @relation("followed", fields: [followedId], references: [id])

  @@map("followers")
}

enum PostStatus {
  DRAFT
  ACTIVE
  BLOCKED
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  content     String
  img         String
  status      PostStatus @default(DRAFT)
  views       Int        @default(0)
  userId      Int
  categoryId  Int
  createAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  PostTag      PostTag[]
  FavoritePost FavoritePost[]
  LikedPost    LikedPost[]

  @@map("posts")
}

model Comment {
  id     Int    @id @default(autoincrement())
  value  String
  postId Int
  userId Int

  parent_comment ParentChildComment[] @relation("parent_comment")
  child_comment  ParentChildComment[] @relation("child_comment")

  @@map("comments")
}

model ParentChildComment {
  id               Int @id @default(autoincrement())
  parent_commentId Int
  child_commentId  Int

  parent_comment Comment @relation("parent_comment", fields: [parent_commentId], references: [id])
  child_comment  Comment @relation("child_comment", fields: [child_commentId], references: [id])

  @@map("parent_child_comment")
}

model Category {
  id    Int    @id @default(autoincrement())
  value String @unique

  Post Post[]

  @@map("categories")
}

model Tag {
  id    Int    @id @default(autoincrement())
  value String @unique

  PostTag PostTag[]

  @@map("tags")
}

model PostTag {
  id     Int @id @default(autoincrement())
  tagId  Int
  postId Int

  tag  Tag  @relation(fields: [tagId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("posts_tags")
}

model FavoritePost {
  id       Int      @id @default(autoincrement())
  userId   Int
  postId   Int
  createAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("favorites_posts_users")
}

model LikedPost {
  id       Int      @id @default(autoincrement())
  userId   Int
  postId   Int
  createAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("liked_posts_users")
}
